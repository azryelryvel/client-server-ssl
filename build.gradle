allprojects { Project p ->
	File sslDir = file(p.buildDir.path + '/ssl')
	Map sslConf = [
		CN: "com.github.azryelryvel.p2p.$p.name",
		OU: 'GIT',
		O: 'GITHUB',
		L: 'Montreal',
		S: 'QC',
		C: 'CA',
		keysize: '2048',
		'validity': '3650',
		'password': 'password',
		alias: p.name,
		keystore: file(sslDir.path + "/${p.name}.p12"),
		certificate: file(sslDir.path + "/${p.name}.cer"),
		storetype: 'PKCS12'
	]
	sslConf['dname'] = "CN=$sslConf.CN, OU=$sslConf.OU, O=$sslConf.O, L=$sslConf.L, S=$sslConf.S, C=$sslConf.C"

	p.ext.sslConf = sslConf

	task createSslDir {
		onlyIf { !sslDir.exists() }
		doFirst { sslDir.mkdirs() }
	}

	task initKeystore(type: Exec, dependsOn: createSslDir) {
		onlyIf { !sslConf.keystore.exists() }
		commandLine 'keytool', '-genkeypair', '-noprompt', '-alias', sslConf.alias, '-storetype', sslConf.storetype, '-dname', sslConf.dname, '-keysize', sslConf.keysize, '-validity', sslConf.validity, '-keystore', sslConf.keystore.path, '-storepass', sslConf.password, '-keypass', sslConf.password
	}

	task exportCertificate(type: Exec, dependsOn: initKeystore) {
		onlyIf { !sslConf.certificate.exists() }
		commandLine 'keytool', '-export', '-alias', sslConf.alias, '-file', sslConf.certificate, '-keystore', sslConf.keystore.path, '-storepass', sslConf.password
	}
}


task importServerCertToClientKeystore(type: Exec, dependsOn: [childProjects['p2p-server'].exportCertificate, childProjects['p2p-client'].initKeystore]) {
	onlyIf {
		Process p = "keytool -list -keystore ${childProjects['p2p-client'].sslConf.keystore.path} -alias ${childProjects['p2p-server'].sslConf.alias}  -storepass ${childProjects['p2p-client'].sslConf.password}".execute()
		p.waitFor()
		return p.exitValue() != 0
	}
	commandLine 'keytool', '-importcert', '-storetype', 'pkcs12', '-noprompt', '-file', childProjects['p2p-server'].sslConf.certificate, '-keystore', childProjects['p2p-client'].sslConf.keystore, '-alias', childProjects['p2p-server'].sslConf.alias, '-storepass', childProjects['p2p-client'].sslConf.password
}

task clean(type: Delete) {
	delete buildDir
}
